/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package design;

import bean.Db_connection;
import bean.ObjDao;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Arka
 */
public class AddItemOnShop extends javax.swing.JPanel {

    /**
     * Creates new form AddItemOffShop
     */
    public AddItemOnShop() {
        initComponents();
        try {
            Connection con = Db_connection.getConnection();
            PreparedStatement ps = con.prepareStatement("SELECT distinct(cat) FROM ddesc a inner join onshopstock b on a.dcode = b.dcode and a.dcode  \n" +
                                                        "in (select dcode from onshopstock where slno in(select max(slno) from onshopstock where mlinstock>=60 \n" +
                                                        "group by dcode))");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                category.addItem(rs.getString(1).trim());
            }
            category.setSelectedItem("-Select-");
            rs.close();
            ps.close();
            con.close();
            barcode.requestFocus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "<html><h3>No Stock Found</html>");
            Logger.getLogger(AddItemOnShop.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brname = new javax.swing.JComboBox<>();
        price = new javax.swing.JTextField();
        rate = new javax.swing.JTextField();
        peg = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        category = new javax.swing.JComboBox<>();
        barcode = new javax.swing.JTextField();
        mlpb = new javax.swing.JComboBox<>();
        qty = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(120, 92));

        brname.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        brname.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        brname.setEnabled(false);
        brname.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                brnameItemStateChanged(evt);
            }
        });
        brname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                brnameKeyPressed(evt);
            }
        });

        price.setEditable(false);
        price.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        price.setText("00.00");
        price.setEnabled(false);
        price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceKeyPressed(evt);
            }
        });

        rate.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        rate.setText("00.00");
        rate.setEnabled(false);
        rate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rateKeyPressed(evt);
            }
        });

        peg.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        peg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "30ML", "60ML" }));
        peg.setEnabled(false);
        peg.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pegItemStateChanged(evt);
            }
        });
        peg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pegKeyPressed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("+Add row");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("- Remove Row");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        category.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        category.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryItemStateChanged(evt);
            }
        });
        category.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                categoryKeyPressed(evt);
            }
        });

        barcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeKeyPressed(evt);
            }
        });

        mlpb.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        mlpb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        mlpb.setEnabled(false);
        mlpb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mlpbItemStateChanged(evt);
            }
        });
        mlpb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mlpbKeyPressed(evt);
            }
        });

        qty.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        qty.setText("0");
        qty.setEnabled(false);
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qtyKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(brname, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mlpb, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(peg, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(rate)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(brname, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(peg, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(barcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mlpb, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {barcode, brname, category, jLabel1, jLabel2, mlpb, peg, price, qty, rate});

    }// </editor-fold>//GEN-END:initComponents

    private void brnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brnameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_brnameKeyPressed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        ObjDao.OS.addButton();
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void pegKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pegKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_pegKeyPressed

    private void rateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateKeyPressed

    private void priceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceKeyPressed
        // TODO add your handling code here:  
    }//GEN-LAST:event_priceKeyPressed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
       ObjDao.OS.remove();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void categoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_categoryKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryKeyPressed

    private void mlpbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mlpbKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_mlpbKeyPressed

    private void qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyPressed
        int a = evt.getKeyCode();
        switch (a) {
            case KeyEvent.VK_UP:
                break;
            case KeyEvent.VK_DOWN:
                // getValue();
                // RetalCode1.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                //brname.requestFocus();
                break;
            case KeyEvent.VK_RIGHT:
                if (!qty.getText().equals("0")) 
                {
                    receiveItem();
                    if (peg.getSelectedItem().toString().trim().equals("60ML")) 
                    {
                        price.setText(String.valueOf(Integer.parseInt(qty.getText()) * 2 * Integer.parseInt(rate.getText())));
                    }
                    if (peg.getSelectedItem().toString().trim().equals("30ML")) 
                    {
                        price.setText(String.valueOf(Integer.parseInt(qty.getText()) * Integer.parseInt(rate.getText())));
                    }
                    calStock();
                    ObjDao.OS.addButton();
                }
                break;
            case KeyEvent.VK_ENTER:
                if (!qty.getText().equals("0")) 
                {
                    receiveItem();
                    if (peg.getSelectedItem().toString().trim().equals("60ML")) 
                    {
                        price.setText(String.valueOf(Integer.parseInt(qty.getText()) * 2 * Integer.parseInt(rate.getText())));
                    }
                    if (peg.getSelectedItem().toString().trim().equals("30ML")) 
                    {
                        price.setText(String.valueOf(Integer.parseInt(qty.getText()) * Integer.parseInt(rate.getText())));
                    }
                    calStock();
                    ObjDao.OS.addButton();
                }
                break;
        }
    // TODO add your handling code here:
    }//GEN-LAST:event_qtyKeyPressed

    private void categoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) 
        {
            if (!evt.getItem().toString().trim().equals("-Select-")) 
            {
                brname.removeAllItems();
                brname.addItem("-Select-");
                try 
                {
                    Connection con = Db_connection.getConnection();
                    PreparedStatement ps = con.prepareStatement("SELECT distinct(bname) FROM ddesc a inner join onshopstock b on a.dcode = b.dcode and a.dcode  \n"
                            + "in (select dcode from onshopstock where slno in(select max(slno) from onshopstock where mlinstock>=60 \n"
                            + "group by dcode)) and cat = ?");
                    ps.setString(1, evt.getItem().toString().trim());
                    ResultSet rs = ps.executeQuery();
                    brname.removeAllItems();
                    brname.addItem("-Select-");
                    while (rs.next()) {
                        brname.addItem(rs.getString(1).trim());
                    }
                    brname.setEnabled(true);
                    brname.requestFocus();
                    rs.close();
                    ps.close();
                    con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AddItemOnShop.class.getName()).log(Level.SEVERE, null, ex);
                }
            } 
            else 
            {
                brname.setSelectedItem("-Select-");
                brname.setEnabled(false);
            }
        }
            
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryItemStateChanged
    long instock = 0;
    boolean marker = true;
    
    public void calStock()
    {
        marker = true;
        long nstk = 0;
        int i = 0;
        int qtyml = 0;
        boolean found = false;
        for(i=i;i<ObjDao.OS.cont1.size();i++)
        {
            if(ObjDao.OS.cont1.get(i).barcode.getText().trim().equals(this.barcode.getText().trim())
                    && !ObjDao.OS.cont1.get(i).marker)
            {
                if(ObjDao.OS.cont1.get(i).peg.getSelectedItem().toString().trim().equals("60ML"))
                {
                    qtyml = Integer.parseInt(ObjDao.OS.cont1.get(i).qty.getText())*2*30;
                }
                if(ObjDao.OS.cont1.get(i).peg.getSelectedItem().toString().trim().equals("30ML"))
                {
                    qtyml = Integer.parseInt(ObjDao.OS.cont1.get(i).qty.getText())*30;
                }
                               
                if(!found)
                {
                    ObjDao.OS.cont1.get(i).instock = instock - qtyml;
                    instock = ObjDao.OS.cont1.get(i).instock;
                    //nstk = instock;
                }
                else
                {
                    ObjDao.OS.cont1.get(i).instock = nstk - qtyml;
                    nstk = nstk - qtyml;
                }
            }
            else if(ObjDao.OS.cont1.get(i).barcode.getText().trim().equals(this.barcode.getText().trim())
                    && ObjDao.OS.cont1.get(i).marker)
            {
                if(peg.getSelectedItem().toString().trim().equals("60ML"))
                {
                    qtyml = Integer.parseInt(qty.getText())*2*30;
                }
                if(peg.getSelectedItem().toString().trim().equals("30ML"))
                {
                    qtyml = Integer.parseInt(qty.getText())*30;
                }
                if((instock-qtyml)<0)
                {
                    JOptionPane.showMessageDialog(null, "<html><h3>Quantity Not In Stock</html>");
                    ObjDao.OS.remove();
                    return;
                }
                instock = instock - qtyml;
                nstk = instock;
                marker = false;
                found = true;
            }
            //System.out.println(instock+"\t"+nstk+"\n");
        }        
    }
        
    private void mlpbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mlpbItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) 
        {
            if (!evt.getItem().toString().trim().equals("-Select-"))
            {
                try {
                    Connection con = Db_connection.getConnection();
                    PreparedStatement ps = con.prepareStatement("SELECT a.dcode, price30ml FROM ddesc a inner join onshopstock b on a.dcode = b.dcode and a.dcode  \n" +
                                                                "in (select dcode from onshopstock where slno in(select max(slno) from onshopstock where mlinstock>=60 \n" +
                                                                "group by dcode)) and cat = ? and bname = ? and mlpb = ?");
                    ps.setString(1, category.getSelectedItem().toString().trim());
                    ps.setString(2, brname.getSelectedItem().toString().trim());
                    ps.setString(3, evt.getItem().toString().trim());
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) 
                    {
                        peg.setSelectedItem("30ML");
                        peg.setEnabled(true);
                        barcode.setText(rs.getString("dcode"));
                        //instock = rs.getLong("mlinstock");
                        rate.setText(rs.getString("price30ml"));
                        //peg.requestFocus();
                    }
                    else
                    {
                        instock = 0;
                        JOptionPane.showMessageDialog(null, "<html><h3>Item Not In Exists Or Not In Stock</html>");
                    }
                    rs.close();
                    ps.close();
                    con.close();
                } catch (SQLException ex) {
                    instock = 0;
                    Logger.getLogger(AddItemOnShop.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                peg.setSelectedItem("-Select-");
                peg.setEnabled(false);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_mlpbItemStateChanged

    private void brnameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_brnameItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) 
        {
            if (!evt.getItem().toString().trim().equals("-Select-"))
            {
                mlpb.removeAllItems();
                mlpb.addItem("-Select-");
                try 
                {
                    Connection con = Db_connection.getConnection();
                    PreparedStatement ps = con.prepareStatement("SELECT distinct(mlpb) FROM ddesc a inner join onshopstock b on a.dcode = b.dcode and a.dcode  \n" +
                                                                "in (select dcode from onshopstock where slno in(select max(slno) from onshopstock where mlinstock>=60 \n" +
                                                                "group by dcode)) and cat = ? and bname = ?");
                    ps.setString(1, category.getSelectedItem().toString().trim());
                    ps.setString(2, evt.getItem().toString().trim());
                    ResultSet rs = ps.executeQuery();
                    while (rs.next()) {
                        mlpb.addItem(rs.getString(1).trim());
                    }
                    rs.close();
                    ps.close();
                    con.close();
                    mlpb.setEnabled(true);
                    mlpb.requestFocus();
                } 
                catch (SQLException ex) 
                {
                    Logger.getLogger(AddItemOnShop.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                mlpb.setSelectedItem("-Select-");
                mlpb.setEnabled(false);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_brnameItemStateChanged

    private void pegItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pegItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) 
        {
            if (!evt.getItem().toString().trim().equals("-Select-"))
            {
                qty.setEnabled(true);
                qty.setText("0");
                qty.requestFocus();
            }
            else
            {
                qty.setText("0");
                qty.setEnabled(false);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_pegItemStateChanged

    public void receiveItem()
    {
        try 
        {
            Connection con = Db_connection.getConnection();
            PreparedStatement ps = con.prepareStatement("SELECT * FROM ddesc a inner join onshopstock b on a.dcode = b.dcode and b.slno in \n" +
                                                        "(select max(slno) from onshopstock where dcode = ? and mlinstock>60 group by dcode)");
            ps.setString(1, barcode.getText().trim());
            ResultSet rs = ps.executeQuery();
            if(rs.next())
            {
                category.setSelectedItem(rs.getString("cat"));
                brname.setSelectedItem(rs.getString("bname"));
                mlpb.setSelectedItem(rs.getString("mlpb"));
                rate.setText(rs.getString("price30ml"));
                qty.setEditable(true);
                qty.requestFocus();
                instock = rs.getInt("mlinstock");
                //System.out.println(stock);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "<html><h3><center>Item Does Not Exists Or Not In Stock<br>Please Select By Category</html>");
                instock = 0;
                qty.setEnabled(false);
                qty.setText("0");
                barcode.setText("");
                category.setSelectedItem("-Select-");
                brname.setSelectedItem("-Select-");
                mlpb.setSelectedItem("-Select-");
                rate.setText("0");
                category.requestFocus();
            }
            rs.close();
            ps.close();
            con.close();
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "<html>Some Error Occoured</html>");
            instock = 0;
            qty.setEnabled(false);
            Logger.getLogger(AddItemOffShop.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    private void barcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeKeyPressed
        int a = evt.getKeyCode();
        switch (a) {
            case KeyEvent.VK_UP:
                break;
            case KeyEvent.VK_DOWN:
                // getValue();
                // RetalCode1.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                //brname.requestFocus();
                break;
            case KeyEvent.VK_RIGHT:
                receiveItem();
                break;
            case KeyEvent.VK_ENTER:
                receiveItem();
                break;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_barcodeKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField barcode;
    public javax.swing.JComboBox<String> brname;
    public javax.swing.JComboBox<String> category;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JComboBox<String> mlpb;
    public javax.swing.JComboBox<String> peg;
    public javax.swing.JTextField price;
    public javax.swing.JTextField qty;
    public javax.swing.JTextField rate;
    // End of variables declaration//GEN-END:variables
}
