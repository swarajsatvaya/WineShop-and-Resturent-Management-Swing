/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package design;

import bean.Db_connection;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arka
 */
public class FoodEntry extends javax.swing.JPanel {

    /**
     * Creates new form FoodEntry
     */
    public FoodEntry() {
        initComponents();
       Foodtype();
        getValue();
    }

    

    
    public void Foodtype()
    {
      try{
          
            Connection con=Db_connection.getConnection();
            PreparedStatement ps= con.prepareStatement("Select distinct(ftype) from food"); 
            ResultSet rs=ps.executeQuery();
            //ftype1.addItem("-Select-");
         //  ftype1.removeAllItems();
           //ftype1.addItem("-Select-");       
            while(rs.next())
            {
                // if(rs.toString().eq)
                ftype1.addItem(rs.getString("ftype"));
            }
            ps.close();
            con.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    public void FoodName()
    {
       // if(!ftype1.getSelectedItem().equals("-Select-"))
         //    {
      try
             
             {
            
            Connection con=Db_connection.getConnection();
            PreparedStatement ps= con.prepareStatement("Select distinct(fname) from food where ftype='"+ftype1.getSelectedItem().toString()+"'"); 
            ResultSet rs=ps.executeQuery();
            fname1.removeAllItems();
            fname1.addItem("-Select-");
            while(rs.next())
            {
                // String ab=rs.getString("fname");// if(rs.toString().eq)
                 
                fname1.addItem(rs.getString("fname"));
            }
            ps.close();
            con.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
       //  }
                //}
    }
    
    
     public void getValue()
     { 
      try
          {
            Connection con=Db_connection.getConnection();
  java.sql.PreparedStatement ps=con.prepareStatement("select * from food");
              ResultSet rs=ps.executeQuery();
               DefaultTableModel model = null;
	     model = (DefaultTableModel) foodTable.getModel();
             int r=0;
              while(rs.next())
              {
                model.insertRow(r , new Object[]{rs.getString(3), rs.getString(2), rs.getString(4),rs.getString(5),rs.getString(6)});
		r++;  
              }
              ps.close();
	      con.close();
          }
          catch(Exception e)
          {
              e.printStackTrace();
          }
         
     }
    
     
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel10 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        hprice1 = new javax.swing.JTextField();
        disc1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        fprice1 = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        foodTable = new javax.swing.JTable();
        Food_add1 = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        fname1 = new javax.swing.JComboBox<>();
        ftype1 = new javax.swing.JComboBox<>();
        Clear = new javax.swing.JButton();

        jPanel10.setBackground(new java.awt.Color(0, 0, 0));

        jLabel21.setBackground(new java.awt.Color(0, 0, 0));
        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("New Food Category Entry");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
        );

        jLabel23.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel23.setText("Food Type");

        jLabel24.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel24.setText("Food Name");

        jLabel25.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("<html><center>Food Half Plate <br>Price(Rs.)</html>");
        jLabel25.setToolTipText("");

        jLabel26.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel26.setText("<html><center>Food Full Plate <br>Price(Rs.)</html>");
        jLabel26.setToolTipText("");

        hprice1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        disc1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        jLabel28.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("<html><center>Discount<br>(%)");

        fprice1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        update.setBackground(new java.awt.Color(0, 102, 102));
        update.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        foodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Type", "Food Name", " Half Plate Price", "Full Plate Price", "Discount"
            }
        ));
        foodTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foodTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(foodTable);

        Food_add1.setBackground(new java.awt.Color(153, 153, 255));
        Food_add1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Food_add1.setForeground(new java.awt.Color(255, 255, 255));
        Food_add1.setText("Add");
        Food_add1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Food_add1MouseClicked(evt);
            }
        });
        Food_add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Food_add1ActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(51, 51, 255));
        Delete.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        fname1.setEditable(true);
        fname1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        fname1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        fname1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fname1ActionPerformed(evt);
            }
        });
        fname1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fname1KeyPressed(evt);
            }
        });

        ftype1.setEditable(true);
        ftype1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ftype1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-" }));
        ftype1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ftype1MouseClicked(evt);
            }
        });
        ftype1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftype1ActionPerformed(evt);
            }
        });
        ftype1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ftype1KeyPressed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(0, 102, 102));
        Clear.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        Clear.setForeground(new java.awt.Color(255, 255, 255));
        Clear.setText("Clear");
        Clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClearMouseClicked(evt);
            }
        });
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ftype1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(fname1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(hprice1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fprice1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(disc1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Food_add1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Delete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hprice1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(disc1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fprice1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Food_add1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fname1)
                    .addComponent(ftype1))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fname1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fname1ActionPerformed

        
    }//GEN-LAST:event_fname1ActionPerformed

    private void fname1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fname1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_fname1KeyPressed

    private void ftype1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftype1ActionPerformed
        // TODO add your handling code here:
        FoodName();
    }//GEN-LAST:event_ftype1ActionPerformed

    private void ftype1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ftype1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftype1KeyPressed

    private void ftype1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ftype1MouseClicked
        // TODO add your handling code here:
       // Foodtype();
       if(!ftype1.getSelectedItem().equals("-Select-"))
       {
        FoodName();
       }
      
    }//GEN-LAST:event_ftype1MouseClicked

    private void foodTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foodTableMouseClicked
        // TODO add your handling code here:
      int  row=foodTable.getSelectedRow();
	if(row != -1)
	{
	    ftype1.setSelectedItem(foodTable.getModel().getValueAt(row,0).toString());
            fname1.setSelectedItem(foodTable.getModel().getValueAt(row,1).toString());
	    hprice1.setText(foodTable.getModel().getValueAt(row,2).toString());
            fprice1.setText(foodTable.getModel().getValueAt(row,3).toString());
            disc1.setText(foodTable.getModel().getValueAt(row,4).toString());
            //vat1.setText(food.getModel().getValueAt(row,5).toString());
            ftype1.setEnabled(false);
            fname1.setEnabled(false);
            
        }
    }//GEN-LAST:event_foodTableMouseClicked
int row;
    private void Food_add1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Food_add1MouseClicked
        // TODO add your handling code here:
 
        try
          {
       if(!ftype1.getSelectedItem().toString().trim().equals("-Select-")&&
       !fname1.getSelectedItem().toString().trim().equals("-Select-")&&
       !hprice1.getText().trim().equals("")&&
       !hprice1.getText().trim().equals("")&&
       !fprice1.getText().trim().equals("")&&!disc1.getText().trim().equals(""))
        {
             
            Connection con=Db_connection.getConnection();
  java.sql.PreparedStatement ps=con.prepareStatement("insert into food (fname,ftype,hprice,fprice,discount) values(?,?,?,?,?)");
             ps.setString(1, fname1.getSelectedItem().toString().trim());
             ps.setString(2,  ftype1.getSelectedItem().toString().trim());
             ps.setDouble(3, Double.parseDouble(hprice1.getText().trim()));
             ps.setDouble(4, Double.parseDouble(fprice1.getText().trim()));
             ps.setFloat(5, Float.parseFloat(disc1.getText().trim()));
             int i=ps.executeUpdate();
             if(i>0)
             {     DefaultTableModel model = null;
		    model = (DefaultTableModel) foodTable.getModel();
               model.insertRow(model.getRowCount(), new Object[]{ftype1.getSelectedItem().toString().trim(), fname1.getSelectedItem().toString().trim(), Double.parseDouble(hprice1.getText().trim()), Double.parseDouble(fprice1.getText().trim()),Float.parseFloat(disc1.getText().trim())});
		    foodTable.getSelectionModel().clearSelection();
		    row = -1;
                   hprice1.setText("");
                   fprice1.setText("");
                   disc1.setText("");  
                   ftype1.setSelectedItem("-Select-");
                   fname1.setSelectedItem("-Select-");
                   ftype1.setEnabled(true);
                   fname1.setEnabled(true);
                   // ftype1.removeAll();
                   // ftype1.addItem("-Select-");
                   //Foodtype();
                   Foodtype();
             
              }
              
        ps.close();
             con.close();
             
          }
       else{
             JOptionPane.showMessageDialog(null,"Fill up the Empty Field");  
                }
          }
          catch(Exception e)
          {
           e.printStackTrace();
          }
          
        
    }//GEN-LAST:event_Food_add1MouseClicked

    private void Food_add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Food_add1ActionPerformed
        // TODO add your handling code here:
   /*      try
          {
       if(!ftype1.getSelectedItem().toString().trim().equals("-Select-")&&
       !fname1.getSelectedItem().toString().trim().equals("-Select-")&&
       !hprice1.getText().trim().equals("")&&
       !hprice1.getText().trim().equals("")&&
       !fprice1.getText().trim().equals("")&&!disc1.getText().trim().equals(""))
        {
             
            Connection con=Db_connection.getConnection();
  java.sql.PreparedStatement ps=con.prepareStatement("insert into food (fname,ftype,hprice,fprice,discount) values(?,?,?,?,?)");
             ps.setString(1, ftype1.getSelectedItem().toString().trim());
             ps.setString(2, fname1.getSelectedItem().toString().trim());
             ps.setDouble(3, Double.parseDouble(hprice1.getText().trim()));
             ps.setDouble(4, Double.parseDouble(fprice1.getText().trim()));
             ps.setFloat(5, Float.parseFloat(disc1.getText().trim()));
             int i=ps.executeUpdate();
             if(i>0)
             {     DefaultTableModel model = null;
		    model = (DefaultTableModel) foodTable.getModel();
               model.insertRow(model.getRowCount(), new Object[]{ftype1.getSelectedItem().toString().trim(), fname1.getSelectedItem().toString().trim(), Double.parseDouble(hprice1.getText().trim()), Double.parseDouble(fprice1.getText().trim()),Float.parseFloat(disc1.getText().trim())});
		    foodTable.getSelectionModel().clearSelection();
		    row = -1;
                   hprice1.setText("");
                   fprice1.setText("");
                   disc1.setText("");  
                   ftype1.setSelectedItem("-Select-");
                   fname1.setSelectedItem("-Select-");
                   ftype1.setEnabled(true);
            fname1.setEnabled(true);
             
              }
              
        ps.close();
             con.close();
             
          }
           else{
           JOptionPane.showMessageDialog(null,"Fill up the Empty Field");  
                   }
          }
          catch(Exception e)
          {
           e.printStackTrace();
          }*/
          
    }//GEN-LAST:event_Food_add1ActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        
        row=foodTable.getSelectedRow();
        if(row>=0)
        {   
         DefaultTableModel model = null;
         model = (DefaultTableModel) foodTable.getModel();
           try{
            Connection con=Db_connection.getConnection();
  java.sql.PreparedStatement ps=con.prepareStatement("Delete from food where fname='"+fname1.getSelectedItem().toString().trim()+"'and ftype='"+ftype1.getSelectedItem().toString().trim()+"'");
            ps.executeUpdate();
           
           model.removeRow(row);
            foodTable.getSelectionModel().clearSelection();
              hprice1.setText("");
                   fprice1.setText("");
                   disc1.setText("");  
                   ftype1.setSelectedItem("-Select-");
                   fname1.setSelectedItem("-Select-");
                    ftype1.setEnabled(true);
            fname1.setEnabled(true);
                   ps.close();
                   con.close();
                   // ftype1.removeAll();
                    //ftype1.addItem("-Select-");
                   // Foodtype();
           }
           catch(Exception e)
           {
               e.printStackTrace();
           }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Select Row from Bellow Table");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
    /*  if (row == -1)
	{
	    JOptionPane.showMessageDialog(null, "<html><center><h3>Select a existing Row for upadate</html>");
	    return;
	}*/
    
      
        try{ 
            if(!hprice1.getText().trim().equals("")&&
                      !fprice1.getText().trim().equals("")&&!disc1.getText().trim().equals(""))
            {
            Connection con=Db_connection.getConnection();
  java.sql.PreparedStatement ps=con.prepareStatement(" update food set hprice=?,fprice=?,discount=? where  fname='"+fname1.getSelectedItem().toString().trim()+"'and ftype='"+ftype1.getSelectedItem().toString().trim()+"'");
           System.out.println(1);
  ps.setDouble(1,Double.parseDouble(hprice1.getText().trim()));
           ps.setDouble(2,Double.parseDouble(fprice1.getText().trim()));
           ps.setFloat(3,Float.parseFloat(disc1.getText().trim()));
           //ps.setFloat(4,Float.parseFloat(vat1.getText().trim()));
           System.out.println(1);
           int i=ps.executeUpdate();
           if(i==0)
           {
               JOptionPane.showMessageDialog(null, "<html><center><h3>Food Name does not exist</html>");
           }
             
           else
           {   System.out.println(1);      
           
              
                  DefaultTableModel model = null;
		    model = (DefaultTableModel) foodTable.getModel();
		    model.removeRow(foodTable.getSelectedRow());
		    model.insertRow(model.getRowCount(), new Object[]{ftype1.getSelectedItem().toString().trim(), fname1.getSelectedItem().toString().trim(), Double.parseDouble(hprice1.getText().trim()), Double.parseDouble(fprice1.getText().trim()),Float.parseFloat(disc1.getText().trim())});
		    foodTable.getSelectionModel().clearSelection();
		    fprice1.setText("");
                    disc1.setText("");  
                    ftype1.setSelectedItem("-Select-");
                    fname1.setSelectedItem("-Select-"); 
                    ftype1.setEnabled(true);
                    fname1.setEnabled(true);
                    // ftype1.removeAll();
                   //  ftype1.addItem("-Select-");
                   //  Foodtype();
                   
                   ps.close();
                   con.close();
               }
            }
        
            else
            {
                JOptionPane.showMessageDialog(null,"Fill Up The Empty Field");
            }
        }
         catch(Exception e)
         {
             e.printStackTrace();
         }
        
                                          

    }//GEN-LAST:event_updateActionPerformed

    private void ClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClearMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ClearMouseClicked

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
hprice1.setText("");
                   fprice1.setText("");
                   disc1.setText("");  
                   ftype1.setSelectedItem("-Select-");
                   fname1.setSelectedItem("-Select-"); 
                    ftype1.setEnabled(true);
            fname1.setEnabled(true);
                   // TODO add your handling code here:
    }//GEN-LAST:event_ClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Food_add1;
    private javax.swing.JTextField disc1;
    private javax.swing.JComboBox<String> fname1;
    private javax.swing.JTable foodTable;
    private javax.swing.JTextField fprice1;
    public javax.swing.JComboBox<String> ftype1;
    private javax.swing.JTextField hprice1;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
